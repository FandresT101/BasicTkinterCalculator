name: CI QA Workflow (BasicTkinterCalculator)  # Nombre del flujo de trabajo de integración continua (CI)

on:  # Define cuándo se ejecuta este flujo de trabajo
  pull_request:  # Se ejecuta cuando se crea o actualiza un pull request
    branches:
      - qa  # Solo se ejecutará cuando el pull request sea hacia la rama 'qa'

jobs:  # Define los trabajos o tareas que se ejecutarán
  build:  # Nombre del trabajo, en este caso 'build'
    runs-on: ubuntu-latest  # Se ejecutará en un entorno de máquina virtual de Ubuntu más reciente

    steps:  # Lista de pasos que se ejecutarán dentro de este trabajo
      - name: Checkout code  # Nombre del paso
        uses: actions/checkout@v2  # Acción para descargar el código fuente del repositorio

      - name: Set up Python  # Nombre del paso para configurar Python
        uses: actions/setup-python@v2  # Acción para configurar el entorno de Python
        with:
          python-version: '3.8'  # Versión de Python que se va a instalar (en este caso, 3.8)

      - name: Install dependencies  # Nombre del paso para instalar dependencias
        run: |
          python -m pip install --upgrade pip  # Comando para actualizar 'pip', el gestor de paquetes de Python

      - name: Run unit tests  # Nombre del paso para ejecutar pruebas unitarias
        run: |
          python -m unittest test_calculator.py  # Ejecuta las pruebas unitarias en el archivo 'test_calculator.py'
        continue-on-error: false  # Si las pruebas fallan, este paso también fallará y detendrá el proceso de CI

      - name: Upload test results on failure  # Paso para manejar los fallos en las pruebas
        if: failure()  # Solo se ejecuta si el paso anterior falla (si las pruebas fallan)
        run: |
          echo "Las pruebas fallaron. Subiendo los resultados..."  # Muestra un mensaje indicando que las pruebas fallaron
          # Aquí se puede agregar lógica para subir los resultados a algún servicio o generar un reporte de los fallos
